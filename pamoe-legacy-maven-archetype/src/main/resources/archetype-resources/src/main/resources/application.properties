# Development Profile
%dev.quarkus.http.port=${port}

# Greetings
greeting.message="Welcome to ${projectDescription}..."
greeting.name="${projectDescription}"

# Packaging
quarkus.package.type=fast-jar

# Logging
quarkus.log.level=${quarkusLogLevel}
quarkus.log.category."org.jbpm".level=${quarkusLogLevel}
quarkus.log.category."org.kie.kogito".level=${quarkusLogLevel}

# Swagger
quarkus.http.cors=${swaggerEnabled}
quarkus.http.cors.origins=*
quarkus.dev-ui.cors.enabled=false
quarkus.smallrye-openapi.path=/docs/openapi.json
quarkus.swagger-ui.always-include=${swaggerEnabled}
quarkus.http.test-port=0

# Services
quarkus.kogito.devservices.enabled=${devKogitoServicesEnabled}
quarkus.devservices.enabled=${devQuarkusServicesEnabled}
kogito.service.url=${kogitoServiceURL}
kogito.jobs-service.url=${kogitoJobsServiceURL}
kogito.dataindex.http.url=${kogitoDataIndexURL}

# Automatic Database Table Creation
kie.flyway.enabled=${flyawayEnabled}

# Persistence Type
kogito.persistence.type=${persistenceType}

# Data Source
quarkus.datasource.db-kind=${dbKind}
quarkus.datasource.username=${dbUser}
quarkus.datasource.password=${dbPassword}
quarkus.datasource.jdbc.url=${jdbcURL}
quarkus.datasource.reactive.url=${reactiveURL}

# Jobs Service
kogito.jobs-service.schedulerChunkInMinutes=10
kogito.jobs-service.loadJobIntervalInMinutes=1
kogito.jobs-service.loadJobFromCurrentTimeIntervalInMinutes=5
kogito.jobs-service.loadJobRetries=3
kogito.jobs-service.loadJobErrorStrategy=NONE

# Transactions
kogito.transactionEnabled=${transactionEnabled}
kogito.processes.transactionEnabled=${processTransactionsEnabled}
kogito.usertasks.transactionEnabled=${userTaskTransactionsEnabled}

# Roles
jbpm.devui.users.jdoe.groups=${roles}

# OIDC
quarkus.oidc.enabled=${oidcEnabled}
quarkus.oidc.auth-server-url=${oidcAuthServerURL}
quarkus.oidc.discovery-enabled=${oidcDiscoveryEnabled}
quarkus.oidc.tenant-enabled=${oidcTenantEnabled}
quarkus.oidc.client-id=${oidcClientId}
quarkus.oidc.credentials.secret=secret
quarkus.oidc.application-type=service

# Configuring secured endpoints
quarkus.http.auth.permission.authenticated.paths=/*
quarkus.http.auth.permission.authenticated.policy=authenticated
quarkus.http.auth.permission.public.paths=/q/*,/docs/*,/kogito/security/oidc/*
quarkus.http.auth.permission.public.policy=permit

# Images
%container.quarkus.container-image.build=${containerImageBuild}
%container.quarkus.container-image.push=${containerImagePush}
%container.quarkus.container-image.name=${artifactId}
%container.quarkus.container-image.group=${containerImageGroup}
%container.quarkus.container-image.tag=${version}
%container.quarkus.container-image.builder=${containerImageBuilder}

# Kubernetes
%container.quarkus.kubernetes-client.api-server-url=${kubernetesClientApiServerURL}
%container.quarkus.kubernetes-client.token=${kubernetesClientToken}

# OpenShift
%container.quarkus.openshift.deploy=${openshiftDeploy}
%container.quarkus.openshift.route.expose=${openshiftRouteExpose}
%container.quarkus.openshift.route.target-port=${openshiftRouteTargetPort}

# Container Image Repository
%container.quarkus.container-image.registry=${containerImageRegistry}
%container.quarkus.container-image.username=${containerImageUser}
%container.quarkus.container-image.password=${containerImagePassword}

